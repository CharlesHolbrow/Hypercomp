desc: Ambisonic Compressor
slider1:0.75<0, 1, 0.01>Display Threshold
slider2:1<0, 2, 0.01>Scale Brightness
slider3:0.5<0, 1, 0.1>Misc

filename:0,left_x72.png
filename:1,right_x72.png
filename:2,front_x72.png
filename:3,rear_x72.png
filename:4,above_x72.png
filename:5,below_x72.png


@slider
display_threshold = slider1 * slider1;


@init
// Set analysis resolution.
box_width = 288;
box_height = 144;

// For display only, draw a border around the visulization rectangle
border = 2;

// How long do we calculate the RMS over?
buff_size_ms = 100;
buff_size_samples = floor(srate / 1000 * buff_size_ms);

// Cached some constants
box_width_inverse = 1 / box_width;
box_height_inverse = 1 / box_height;
sqrt2 = sqrt(2);

// My very simple memory allocator. We never need to free
// memory, so our program code is responsible for keeping
// track of how large each block of memory is. 
malloc_ptr = 0;
function malloc(size)(
  this.ptr = malloc_ptr;
  this.i = 0;
  loop(size,
    malloc_ptr[this.i] = 0;
    this.i += 1;
  );
  malloc_ptr += size;
  this.ptr;
);

// Allocate an audio buffer
// the first four memory locations store meta-data about the buffer
// - buff[0] stores the number of audio samples this buffer can store
// Assuming we use buff_push to add each sample to our buffer:
// - buff[1] stores the position where we will place the next sample (relative to this.buff)
// - buff[2] stores the sum of the square of each sample
// - buff[3] stores the RMS of the buffer
function create_buffer(size_in_samples)(
  this.buff = malloc(size_in_samples + 4);
  this.buff[0] = size_in_samples;
  this.buff[1] = 4;
  this.buff;
);

// Add a value to the buffer, keeping all meta-data up to date.
function buff_push(buff, value)(
  buff[2] -= pow(buff[buff[1]], 2);
  buff[buff[1]] = value;
  buff[2] += pow(value, 2);
  buff[3] = sqrt(buff[2] / buff[0]);

  buff[1] += 1;
  buff[1] >= (buff[0] + 4) ? (buff[1] = 4;);
);

// Retrieve the RMS of buff
function buff_rms(buff)(
  buff[3];
);


buff_front = create_buffer(buff_size_samples);
buff_right = create_buffer(buff_size_samples);
buff_left = create_buffer(buff_size_samples);
buff_rear = create_buffer(buff_size_samples);
buff_top = create_buffer(buff_size_samples);
buff_bottom = create_buffer(buff_size_samples);


@sample
a_w = spl0 * sqrt2;
a_x = spl1;
a_y = spl2;
a_z = spl3;

half_w = a_w * 0.5;
buff_push(buff_front, half_w + a_x * 0.5);
buff_push(buff_rear,  half_w - a_x * 0.5);
buff_push(buff_left,  half_w + a_y * 0.5);
buff_push(buff_right, half_w - a_y * 0.5);
buff_push(buff_top, half_w + a_z * 0.5);
buff_push(buff_bottom, half_w - a_z * 0.5);

rms_front = buff_rms(buff_front);
rms_rear = buff_rms(buff_rear);
rms_top = buff_rms(buff_top);
rms_bottom = buff_rms(buff_bottom);
rms_left = buff_rms(buff_left);
rms_right = buff_rms(buff_right);

////////////////////////////////////////////////////////////////
//
// Execute gfx code approximately 30 times per second. Note that
// it runs on a separate thread from audio processing above. 
//
////////////////////////////////////////////////////////////////
@gfx 360 360

half_width = gfx_w / 2;
half_height = gfx_h / 2;

// Draw a box around the region we will render to.
//
// The origin is the upper left, and y axis increases downward
// box_x and box_y are the coordinates of the upper-left
// position that we will render to
box_x = half_width - (box_width * 0.5);
box_y = half_height - (box_height * 0.5);
gfx_mode = 0;
gfx_r = 0; gfx_g = 0; gfx_b = 1; gfx_a = 1;
// draw a large blue box
gfx_rect(
  box_x - border,
  box_y - border,
  box_width + (border * 2),
  box_height + (border * 2)
);
// A black box inside the blue box is our render canvas
gfx_r = 0; gfx_g = 0; gfx_b = 0;
gfx_rect(box_x, box_y, box_width, box_height);

// additive mode for drawing images
gfx_mode = 1;

// setup our outer loop on the y axis
gfx_y = box_y;
gfx_x = box_x;

// draw the six regions 
gfx_a = buff_rms(buff_left);
gfx_blit(0, 1, 0);
gfx_a = buff_rms(buff_right);
gfx_blit(1, 1, 0);
gfx_a = buff_rms(buff_front);
gfx_blit(2, 1, 0);
gfx_a = buff_rms(buff_rear);
gfx_blit(3, 1, 0);
gfx_a = buff_rms(buff_top);
gfx_blit(4, 1, 0);
gfx_a = buff_rms(buff_bottom);
gfx_blit(5, 1, 0);
gfx_a = 1; // reset alpha ch after displaying images

// absolute mode for painting scaled values
gfx_mode = 0; 

// keep track of these stats for each frame
max_level_temp = 0;
total = 0;

y = 0;
loop(box_height,

  // setup our inner loop on the x axis
  x = 0; gfx_x = box_x;
  loop(box_width,

    gfx_getpixel(level, none, none);

    // Track the highest pixel value in this frame
    level > max_level_temp ? max_level_temp = level;
    // Summation of all pixels in this frame
    total += level;

    //condition for viewing
    level = pow(level, slider2);
    level -= display_threshold;
    level *= 1/(1 - display_threshold);

    gfx_setpixel(level, 0, 0);

    gfx_x += 1;
    x += 1;
  );

  gfx_y += 1;
  y += 1;
);

max_level = max_level_temp;
avg_level = max_level / (box_width * box_height);
